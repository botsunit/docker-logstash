filter {

  if [type] == "alert" {
    mutate {
      remove_field => [ "groupKey" ]
    }
  }

  if [type] == "alert" and [foo] == "-" {
    mutate {
      add_field => { "service_name" => "alertmanager" }
      add_field => { "service_group" => "monitoring" }
      add_field => { "image_name" => "prom/alertmanager" }
      replace => { "message" => "%{commonAnnotations.summary} -- %{commonAnnotations.description}" }
    }
  }

  if [type] == "alert" and [message] {
    mutate {
      add_field => { "service_name" => "elastalert" }
      add_field => { "service_group" => "monitoring" }
      add_field => { "image_name" => "ivankrizsan/elastalert" }
    }
  } else if [type] == "alert" {
    mutate {
      add_field => { "service_name" => "alertmanager" }
      add_field => { "service_group" => "monitoring" }
      add_field => { "image_name" => "prom/alertmanager" }
      add_field => { "message" => "EMPTY" }
      replace => { "message" => "%{commonAnnotations.summary} -- %{commonAnnotations.description}" }
    }
  }

  if "elasticsearch" in [service_name] {
    multiline {
        pattern => "^\s"
        what => "previous"
        negate => true
        source => "short_message"
        stream_identity => "%{host}.%{container_id}"
    }
  }

  # adding (faking them) container-fields to filebeat which doesn't use docker's log-driver to ship logs
  if [beat][name] == "filebeat" {
    mutate {
      add_field => { "service_name" => "filebeat" }
      add_field => { "service_group" => "monitoring" }
      add_field => { "image_name" => "prima/filebeat" }
    }
  }

  if "php-fpm" in [tag] {
    grok {
      patterns_dir => [ "/opt/logstash/extra_patterns" ]
      match => { "message" => "%{PHPFPM_MESSAGE}" }
      remove_tag => ["_grokparsefailure"]
      add_tag => ["php_message"]
    }

    if "php_message" in [tags] {
      mutate {
        update => { "message" => "%{error_clean_message}" }
        remove_field => [ "error_clean_message" ]
      }

      multiline {
        patterns_dir => [ "/opt/logstash/extra_patterns" ]
        pattern => "%{LARAVEL_ERROR_STACK}"
        remove_tag => ["_grokparsefailure"]
        what => "previous"
        negate => false
      }

      grok {
        patterns_dir => [ "/opt/logstash/extra_patterns" ]
        match => { "message" => "%{PHPFPM_ERROR}" }
        remove_tag => ["_grokparsefailure", "multiline", "php_message"]
        add_tag => ["php_error"]
      }
    } else {
      grok {
        patterns_dir => [ "/opt/logstash/extra_patterns" ]
        match => { "message" => "%{PHPFPM_ACCESS}" }
        remove_tag => ["_grokparsefailure"]
        add_tag => ["php_access"]
      }
    }
  }

  grok {
    patterns_dir => ["/opt/logstash/patterns", "/opt/logstash/extra_patterns"]
    match => { "message" => "%{CUSTOM_LOGLEVEL:log_level}" }
  }

  mutate {
    uppercase => ["log_level"]
  }

}
